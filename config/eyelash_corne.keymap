#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 30    // 10 or 25

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/rgb.h>

#define QTY 0       // QWERTY
#define QTY_HR 1    // QWERTY w/ HRM
#define CMK 2       // Colemak
#define CMK_HR 3    // Colemak w/ HRM
#define CMR 4       // Colemak Reversed
#define TRN 5       // Transparent (basic querty)
#define LOW 6       // Lower
#define RSE 7       // Raise
#define ADJ 8       // Adjust
#define FUN 9       // Function/Media
#define MAX 10      // Maxtend
#define MSE 11      // Mouse
#define NSP 12      // NumSpace
#define NTB 13      // NumTab (currently unused)
#define AGR 14      // AltGr (for Windows Umlauts via Alt+Numpad)
#define AGS 15      // AltGr+Shift (for Windows uppercase Umlauts via Alt+Numpad)

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;     // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&lt {
    quick-tap-ms = <200>;
};

&caps_word {
    continue-list = <UNDERSCORE BACKSPACE DELETE SEMI>;  
    // SEMI is added here because QWERTY semicolon is letter 'O' in Colemak. Unfortunately, it doesn't automatically get shifted.
};

/ {
    behaviors {
        mup: mute_unmute_ptt {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            hold-while-undecided-linger;
            bindings = <&kp>, <&kp>;
        };

        hml: hrmod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <7 8 9 10 11 12 22 23 24 25 26 27 36 37 38 39 40 41 44 45 46 47>;
            // these are all the right-side buttons
            // left-side thumb button for LOW/TAB also included, allowing Alt-TAB with left hand without tapping-term-ms delay.
            hold-trigger-on-release;
        };

        hmr: hrmod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 42 43 44 45>;
            // these are all the left-side buttons
            hold-trigger-on-release;
        };

        hll: hrlayer_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <7 8 9 10 11 12 22 23 24 25 26 27 36 37 38 39 40 41 44 45 46 47>;
            // these are all the right-side buttons
            // left-side thumb button for LOW/TAB also included, allowing Alt-TAB with left hand without tapping-term-ms delay.
            hold-trigger-on-release;
        };

        hlr: hrlayer_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 42 43 44 45>;
            // these are all the left-side buttons
            hold-trigger-on-release;
        };
        lsz: layer_tap_sz {     // hold for momentary layer, tap for umlaut_sz macro.
                                // pass two parameters to this behaviour:
                                // - number of layer to activate for momentary layer functionality
                                // - second parameter will be ignored (e.g. just pass number 0), it will always tap &uml_sz macro
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            bindings = <&mo>, <&uml_sz>;
            hold-trigger-on-release;
        };
    };

//  key positions (for hold-trigger-key-positions):
//  (0) TAB       (1))Q     (2) W     (3) E     (4) R        (5) T                      (6) up               (7) Y          (8) U     (9) I     (10) O    (11) P     (12) BSPC
//  (13) MAX BSPC (14) A    (15) S    (16) D    (17) F       (18) G         (19) left  (20) mid  (21) right  (22) H         (23) J     (24) K     (25) L    (26) SEMI  (27) APOS
//  (28) LSHFT    (29) Z    (30) X    (31) C    (32) V       (33) B         (34) mute  (35) down             (36) N         (37) M     (38) COMMA (39) DOT  (40) SLASH (41) RSHFT ENTER
//                                    (42) ADJ  (43) LOW TAB (44) MSE SPACE                                  (45) NSP SPACE (46) RSE   (47) FUN

// &kp TAB    &kp Q  &kp W      &kp E     &kp R  &kp T                              &kp UP                &kp Y        &kp U  &kp I      &kp O    &kp P     &kp BSPC
// &td0       &kp A  &kp S      &kp D     &kp F  &kp G                    &kp LEFT  &kp ENTER  &kp RIGHT  &kp H        &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
// &kp LCTRL  &kp Z  &kp X      &kp C     &kp V  &kp B       &kp SPACE              &kp DOWN              &kp N        &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
//                              &kp LGUI  &mo 1  &lt 3 SPACE                                              &lt 3 ENTER  &mo 2  &kp RALT

    combos {
        compatible = "zmk,combos";
        combo_esc_q_w {
            require-prior-idle-ms = <100>;
            timeout-ms = <100>;
            key-positions = <1 2>;
            layers = <QTY QTY_HR CMK CMK_HR CMR TRN>;
            bindings = <&kp ESC>;
        };
        combo_esc_tab_q {
            require-prior-idle-ms = <100>;
            timeout-ms = <100>;
            key-positions = <0 1>;
            layers = <QTY QTY_HR CMK CMK_HR CMR TRN>;
            bindings = <&kp ESC>;
        };
        combo_enter_o_apos {
            require-prior-idle-ms = <100>;
            timeout-ms = <100>;
            key-positions = <26 27>;
            layers = <QTY QTY_HR CMK CMK_HR CMR TRN LOW RSE>;
            bindings = <&kp ENTER>;
        };
        combo_enter_n_e_i {
            require-prior-idle-ms = <100>;
            timeout-ms = <100>;
            key-positions = <23 24 25>;
            layers = <QTY QTY_HR CMK CMK_HR CMR TRN LOW RSE>;
            bindings = <&kp ENTER>;
        };
    };

    macros {
        uml_a: umlaut_a {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N8>
                , <&macro_release &kp LALT>;
        };
        uml_o: umlaut_o {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N6>
                , <&macro_release &kp LALT>;
        };
        uml_u: umlaut_u {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N2>
                , <&macro_release &kp LALT>;
        };
        uml_sz: umlaut_sz {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N3>
                , <&macro_release &kp LALT>;
        };
        umu_a: umlaut_a_uppercase {  // uppercase
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N6>
                , <&macro_release &kp LALT>;
        };
        umu_o: umlaut_o_uppercase {  // uppercase
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N4>
                , <&macro_release &kp LALT>;
        };
        umu_u: umlaut_u_uppercase {  // uppercase
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N0>
                , <&macro_release &kp LALT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty_layer { // Layer 0 (default_layer)
            display-name = "QWERTY";

            bindings = <
                &kp TAB      &kp Q    &kp W    &kp E    &kp R       &kp T                   &kp UP               &kp Y         &kp U     &kp I     &kp O    &kp P     &kp BSPC
                &lt MAX BSPC &kp A    &kp S    &kp D    &kp F       &kp G         &kp LEFT  &kp ENTER &kp RIGHT  &kp H         &kp J     &kp K     &kp L    &kp SEMI  &kp APOS
                &kp LSHFT    &kp Z    &kp X    &kp C    &kp V       &kp B    &mup LC(SPACE) LC(LS(M)) &kp DOWN   &kp N         &kp M     &kp COMMA &kp DOT  &kp SLASH &mt RSHFT ENTER
                                               &mo ADJ  &lt LOW TAB &lt MSE SPACE                                &lt NSP SPACE &mo RSE   &mo FUN
            >;
        };

//         qwerty_hr_layer { // Layer 1
//             display-name = "QWERTY-HRM";

//             bindings = <
//                 &kp TAB      &kp Q       &kp W       &kp E        &kp R        &kp T                 &kp UP               &kp Y         &kp U        &kp I        &kp O       &kp P          &kp BSPC
//                 &lt MAX BSPC &hml LALT A &hml RALT S &hml LSHFT D &hml LCTRL F &hml LGUI G &kp LEFT  &kp ENTER &kp RIGHT  &hmr RGUI H   &hmr RCTRL J &hmr RSHFT K &hmr RALT L &hmr LALT SEMI &kp APOS
//                 &kp LSHFT    &kp Z       &kp X       &kp C        &kp V        &kp B   &mup LC(SPACE) LC(LS(M)) &kp DOWN  &kp N         &kp M        &kp COMMA    &kp DOT     &kp SLASH      &mt RSHFT ENTER
//                                                      &mo ADJ      &lt LOW TAB  &lt MSE SPACE                              &lt NSP SPACE &mo RSE      &mo FUN
//             >;
//         };

//         colemak_layer { // Layer 2
//             display-name = "Colemak";
    
//             bindings = <
//                 &kp TAB      &kp Q    &kp W    &kp F    &kp P       &kp G                   &kp UP               &kp J         &kp L     &kp U     &kp Y    &kp SEMI  &kp BSPC
//                 &lt MAX BSPC &kp A    &kp R    &kp S    &kp T       &kp D         &kp LEFT  &kp ENTER &kp RIGHT  &kp H         &kp N     &kp E     &kp I    &kp O     &kp APOS
//                 &kp LSHFT    &kp Z    &kp X    &kp C    &kp V       &kp B    &mup LC(SPACE) LC(LS(M)) &kp DOWN   &kp K         &kp M     &kp COMMA &kp DOT  &kp SLASH &mt RSHFT ENTER
//                                                &mo ADJ  &lt LOW TAB &lt MSE SPACE                                &lt NSP SPACE &mo RSE   &mo FUN
//             >;
//         };

// //        colemak_hr_layer { // Layer 3
// //            display-name = "Colemak-HRM";
// //
// //            bindings = <
// //                &kp TAB      &kp Q       &kp W       &kp F        &kp P        &kp G         &kp MINUS                &kp EQUAL &kp J         &kp L        &kp U        &kp Y       &kp SEMI    &kp BSPC
// //                &lt MAX BSPC &hml LALT A &hml RALT R &hml LSHFT S &hml LCTRL T &hml LGUI D   &kp LBKT                 &kp RBKT  &hmr RGUI H   &hmr RCTRL N &hmr RSHFT E &hmr RALT I &hmr LALT O &kp APOS
// //                &kp LSHFT    &kp Z       &kp X       &kp C        &kp V        &kp B         &mup LC(SPACE) LC(LS(M)) &kp SPACE &kp K         &kp M        &kp COMMA    &kp DOT     &kp SLASH   &mt RSHFT ENTER
// //                &kp LCTRL    &kp LGUI    &kp LALT    &mo ADJ      &lt LOW TAB  &lt MSE SPACE &none                    &none     &lt NSP SPACE &mo RSE      &mo FUN      &kp RALT    &kp RGUI    &mt RCTRL ENTER
// //            >;
// //        };
// //
//         colemak_hr_layer { // Layer 3
//             display-name = "Colemak-HRM";

//             bindings = <
//                 &kp TAB      &kp Q       &kp W       &kp F        &kp P        &kp G                 &kp UP               &kp J         &kp L        &kp U        &kp Y       &kp SEMI       &kp BSPC
//                 &lt MAX BSPC &hml LALT A &hll AGR R  &hml LSHFT S &hml LCTRL T &hml LGUI D &kp LEFT  &kp ENTER &kp RIGHT  &hmr RGUI H   &hmr RCTRL N &hmr RSHFT E &hlr AGR I  &hmr LALT O    &kp APOS
//                 &kp LSHFT    &kp Z       &kp X       &kp C        &kp V        &kp B   &mup LC(SPACE) LC(LS(M)) &kp DOWN  &kp K         &kp M        &kp COMMA    &kp DOT     &kp SLASH      &mt RSHFT ENTER
//                                                      &mo ADJ      &lt LOW TAB  &lt MSE SPACE                              &lt NSP SPACE &mo RSE      &mo FUN
//             >;
//         };

//         revmak_hr_layer { // Layer 4
//             display-name = "Colemak-reversed";
    
//             bindings = <
//                 &kp TAB      &kp Q    &kp W    &kp K    &kp S       &kp F                   &kp UP               &kp O         &kp I     &kp L     &kp SEMI &kp R     &kp BSPC
//                 &lt MAX BSPC &kp A    &kp D    &kp G    &kp E       &kp T         &kp LEFT  &kp ENTER &kp RIGHT  &kp H         &kp Y     &kp N     &kp U    &kp P     &kp APOS
//                 &kp LSHFT    &kp Z    &kp X    &kp C    &kp V       &kp B    &mup LC(SPACE) LC(LS(M)) &kp DOWN   &kp J         &kp M     &kp COMMA &kp DOT  &kp SLASH &mt RSHFT ENTER
//                                                &mo ADJ  &lt LOW TAB &lt MSE SPACE                                &lt NSP SPACE &mo RSE   &mo FUN
//             >;
//         };

//         transparent_layer { // Layer 5 (basic qwerty)
//             display-name = "QWERTY (base)";
    
//             bindings = <
//                 &kp TAB   &kp Q    &kp W    &kp E    &kp R       &kp T                   &kp UP               &kp Y         &kp U     &kp I     &kp O    &kp P     &kp BSPC
//                 &lt CAPS  &kp A    &kp S    &kp D    &kp F       &kp G         &kp LEFT  &kp ENTER &kp RIGHT  &kp H         &kp J     &kp K     &kp L    &kp SEMI  &kp APOS
//                 &kp LSHFT &kp Z    &kp X    &kp C    &kp V       &kp B    &kp SPACE      &kp DOWN             &kp N         &kp M     &kp COMMA &kp DOT  &kp SLASH &mt RSHFT ENTER
//                                             &mo ADJ  &mo LOW    &kp SPACE                                     &kp SPACE     &mo RSE   &mo FUN
//             >;
//         };

//         lower_layer { // Layer 6 - a number pad on the right hand, function keys on the left
//             display-name = "Lower";
    
//             bindings = <
//                 &kp ESC   &kp F1   &kp F2   &kp F3        &kp F4   &kp F5                   &kp UP               &kp KP_SLASH    &kp KP_N7 &kp KP_N8  &kp KP_N9    &kp KP_MINUS &kp BSPC
//                 &trans    &kp F6   &kp F7   &kp F8        &kp F9   &kp F10        &kp LEFT  &kp ENTER &kp RIGHT  &kp KP_ASTERISK &kp KP_N4 &kp KP_N5  &kp KP_N6    &kp KP_PLUS  &kp KP_ENTER
//                 &trans    &kp F11  &kp F12  &kp C_AL_CALC &none    &kp SEMI  &mup LC(SPACE) LC(LS(M)) &kp DOWN   &kp COLON       &kp KP_N1 &kp KP_N2  &kp KP_N3    &kp EQUAL    &trans
//                                             &trans        &trans   &kp SPACE                                     &kp SPACE       &kp KP_N0 &kp KP_DOT   // &kp COMMA
//             >;
//         };

//         raise_layer { // Layer 7 - a number row on the top, symbols on other rows
//             display-name = "Raise";
    
//             bindings = <
//                 &kp ESC    &kp N1   &kp N2    &kp N3    &kp N4    &kp N5                 &kp UP              &kp N6    &kp N7    &kp N8    &kp N9   &kp N0    &kp DEL
//                 &caps_word &trans   &kp LT    &kp LPAR  &kp RPAR  &kp GT      &kp LEFT  &kp ENTER &kp RIGHT  &kp PLUS  &kp MINUS &kp EQUAL &kp LBKT &kp RBKT  &kp GRAVE
//                 &kp LSHFT  &trans   &kp LBKT  &kp RBKT  &kp LBRC  &kp RBRC   &kp SPACE  &kp DOWN             &kp TILDE &kp UNDER &kp NUHS  &kp NUBS &kp PIPE  &kp BACKSLASH
//                                               &mo ADJ   &mo LOW   &kp BSPC                                   &kp SPACE &mo RSE   &mo FUN   
//             >;
//         };

//         adjust_layer { // Layer 8 - keymap selection, bluetooth profile, output port
//             display-name = "Adjust";
    
//             bindings = <
//                 &kp LA(TAB) &to QTY      &to QTY_HR     &to CMK      &to CMK_HR   &to CMR                   &kp UP               &trans    &trans    &trans    &trans         &trans     &kp LC(LA(DEL))
//                 &kp DEL     &bt BT_SEL 0 &bt BT_SEL 1   &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4    &kp LEFT  &kp ENTER &kp RIGHT  &trans    &trans    &trans    &trans         &trans     &trans
//                 &trans      &bt BT_CLR   &bt BT_CLR_ALL &out OUT_USB &out OUT_BLE &out OUT_TOG   &kp SPACE  &kp DOWN             &trans    &trans    &trans    &trans         &trans     &trans
//                                                         &trans       &sys_reset   &bootloader                                 &bootloader  &sys_reset   &studio_unlock
//             >;
//         };

//         funmedia_layer { // Layer 9 - function keys (left), media control (right)
//             display-name = "Fun/Media";
    
//             bindings = <
//                 &kp TAB   &kp F1   &kp F2   &kp F3   &kp F4   &kp F5                    &kp UP               &trans    &kp C_PP      &kp C_VOL_UP &kp PSCRN      &kp SLCK  &kp PAUSE_BREAK
//                 &kp CAPS  &kp F6   &kp F7   &kp F8   &kp F9   &kp F10         &kp LEFT  &kp ENTER &kp RIGHT  &trans    &kp C_PREV    &kp C_VOL_DN &kp C_NEXT     &trans    &trans
//                 &trans    &kp F11  &kp F12  &trans   &trans   &trans    &kp SPACE       &kp DOWN             &trans    &kp LC(LS(M)) &kp C_MUTE   &trans         &trans    &trans
//                                             &studio_unlock  &sys_reset   &bootloader                         &bootloader   &sys_reset   &trans
//             >;
//         };

//         maxtend_layer { // Layer 10 - Maxtend
//             display-name = "Maxtend";

//             bindings = <
//                 &kp TAB   &kp ESC   &msc SCRL_UP   &kp C_AC_BACK &kp C_AC_FORWARD &trans                  &kp UP               &kp PG_UP     &kp HOME  &kp UP     &kp END   &kp DEL   &kp INS
//                 &trans    &kp LALT  &msc SCRL_DOWN &kp LSHFT     &kp LCTRL        &kp LGUI      &kp LEFT  &kp ENTER &kp RIGHT  &kp PG_DN     &kp LEFT  &kp DOWN   &kp RIGHT &kp BSPC  &kp ENTER
//                 &kp LSHFT &kp LC(Z) &kp LC(X)      &kp LC(C)     &kp LC(V)        &kp LC(B) &kp SPACE     &kp DOWN             &trans        &trans    &trans     &trans    &kp K_APP &kp RSHFT
//                                                    &mo ADJ       &mo LOW          &kp ENTER                                    &kp LC(SPACE) &mo RSE   &mo FUN
//             >;
//         };

//         mouse_layer { // Layer 11 - Mouse
//             display-name = "Mouse";
     
//             bindings = <
//                 &kp ESC   &kp ESC       &kp LC(W)     &kp LC(PG_UP) &kp LC(PG_DN) &kp LC(F)               &kp UP               &msc SCRL_UP   &msc SCRL_LEFT &mmv MOVE_UP   &msc SCRL_RIGHT &kp P     &kp BSPC
//                 &kp CAPS  &kp A         &mkp MB2      &mkp MB3      &mkp MB1      &kp G         &kp LEFT  &kp ENTER &kp RIGHT  &msc SCRL_DOWN &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &kp SEMI  &kp ENTER
//                 &kp LSHFT &kp C_AL_LOCK &kp LC(LS(X)) &kp LC(LS(C)) &kp LC(LS(V)) &kp B     &kp SPACE     &kp DOWN             &kp N          &kp M          &kp COMMA      &kp DOT         &kp SLASH &kp RSHFT
//                                                       &mo ADJ       &mo LOW       &kp SPACE                                    &mkp MB1       &mo RSE        &mo FUN
//             >;
//         };

//         numspace_layer { // Layer 12
//             display-name = "NumSpace";
    
//             bindings = <
//                 &kp TAB   &kp EXCL  &kp AT   &kp HASH &kp DLLR &kp PRCNT               &kp UP               &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR  &kp MINUS
//                 &trans    &kp N1    &kp N2   &kp N3   &kp N4   &kp N5        &kp LEFT  &kp ENTER &kp RIGHT  &kp N6    &kp N7    &kp N8    &kp N9   &kp N0    &kp PLUS
//                 &kp LSHFT &kp MINUS &kp LBKT &kp RBKT &kp LBRC &kp RBRC  &kp SPACE     &kp DOWN             &kp LS(P) &kp P     &kp COMMA &kp DOT  &kp SLASH &mt RSHFT EQUAL
//                                                       &mo ADJ  &mo LOW   &kp ENTER                          &trans    &mo RSE   &mo FUN   
//             >;
//         };

//         numtab_layer { // Layer 13 (currently unused)
//             display-name = "NumTab";
    
//             bindings = <
//                 &kp TAB   &kp Q    &kp W    &kp E    &kp R       &kp T                   &kp UP               &kp Y         &kp U     &kp I     &kp O    &kp P     &kp BSPC
//                 &lt CAPS  &kp A    &kp S    &kp D    &kp F       &kp G         &kp LEFT  &kp ENTER &kp RIGHT  &kp H         &kp J     &kp K     &kp L    &kp SEMI  &kp APOS
//                 &kp LSHFT &kp Z    &kp X    &kp C    &kp V       &kp B    &kp SPACE      &kp DOWN             &kp N         &kp M     &kp COMMA &kp DOT  &kp SLASH &mt RSHFT ENTER
//                                             &mo ADJ  &mo LOW    &kp SPACE                                     &kp SPACE     &mo RSE   &mo FUN
//             >;
//         };

//         // The following two layers generate Colemak AltGr and Colemak AltGr-Shift international characters using Windows Alt+Numpad keystrokes.
//         // Each key needs to be bound to a macro that sends the Alt+Numpad scancodes. You'll need lots of macros for this.
//         // At the moment, only German Umlauts äöü, shifted German Umlauts ÄÖÜ and German "scharfes S" ß have been created.
//         // ß (rewritten as "sz" in ASCII) has a very special binding because it functions as a layer shift when held, but needs to call
//         // the uml_sz macro when tapped.

//         altgr_layer { // Layer 14
//             display-name = "AltGr";
    
//             bindings = <
//                 &kp TAB       &uml_a   &kp W    &kp E      &kp R    &kp T                    &kp UP               &kp Y     &kp U     &kp I     &uml_u   &uml_o    &kp BSPC
//                 &kp CAPS      &kp A    &kp S    &lsz AGS 0 &kp F    &kp G          &kp LEFT  &kp ENTER &kp RIGHT  &kp H     &kp J     &lt AGS K &kp L    &kp SEMI  &kp APOS
//                 &lt AGS LSHFT &kp Z    &kp X    &kp C      &kp V    &kp B     &kp SPACE      &kp DOWN             &kp N     &kp M     &kp COMMA &kp DOT  &kp SLASH &lt AGS RSHFT
//                                                 &mo ADJ    &mo LOW  &kp SPACE                                     &kp SPACE &mo RSE   &mo FUN
//             >;
//         };

//         altgrshift_layer { // Layer 15
//             display-name = "AltGrShift";
    
//             bindings = <
//                 &kp TAB   &umu_a   &kp W    &kp E    &kp R    &kp T                    &kp UP               &kp Y     &kp U     &kp I     &umu_u   &umu_o    &kp BSPC
//                 &kp CAPS  &kp A    &kp S    &uml_sz  &kp F    &kp G          &kp LEFT  &kp ENTER &kp RIGHT  &kp H     &kp J     &kp K     &kp L    &kp SEMI  &kp APOS
//                 &kp LSHFT &kp Z    &kp X    &kp C    &kp V    &kp B     &kp SPACE      &kp DOWN             &kp N     &kp M     &kp COMMA &kp DOT  &kp SLASH &kp RSHFT
//                                             &mo ADJ  &mo LOW  &kp SPACE                                     &kp SPACE &mo RSE   &mo FUN
//             >;
//         };

    };
};


// / {
//     behaviors {
//         td0: td0 {
//             compatible = "zmk,behavior-tap-dance";
//             display-name = "Shift/Caps Lock Tap Dance";
//             #binding-cells = <0>;
//             bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
//         };
//     };

//     rgb_encoder: rgb_encoder {
//         compatible = "zmk,behavior-sensor-rotate";
//         #sensor-binding-cells = <0>;
//         bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
//     };

//     scroll_encoder: scroll_encoder {
//         compatible = "zmk,behavior-sensor-rotate";
//         #sensor-binding-cells = <0>;
//         bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
//         tap-ms = <100>;
//     };

//     keymap {
//         compatible = "zmk,keymap";

//         default_layer {
//             display-name = "QWERTY";
//             bindings = <
// &kp TAB    &kp Q  &kp W      &kp E     &kp R  &kp T                              &kp UP                &kp Y        &kp U  &kp I      &kp O    &kp P     &kp BSPC
// &td0       &kp A  &kp S      &kp D     &kp F  &kp G                    &kp LEFT  &kp ENTER  &kp RIGHT  &kp H        &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
// &kp LCTRL  &kp Z  &kp X      &kp C     &kp V  &kp B       &kp SPACE              &kp DOWN              &kp N        &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
//                              &kp LGUI  &mo 1  &lt 3 SPACE                                              &lt 3 ENTER  &mo 2  &kp RALT
//             >;
//             sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
//         };

//         lower_layer {
//             display-name = "NUMBER";
//             bindings = <
// &trans  &kp N1           &kp N2          &kp N3        &kp N4        &kp N5                                        &mmv MOVE_UP                     &kp N6           &kp N7           &kp N8           &kp N9           &kp N0    &kp BSPC
// &trans  &bt BT_CLR_ALL   &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3                           &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LEFT         &kp DOWN         &kp UP           &kp RIGHT        &kp HOME  &kp PG_UP
// &trans  &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &trans        &trans        &rgb_ug RGB_EFF &kp C_MUTE                    &mmv MOVE_DOWN                   &rgb_ug RGB_EFR  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp END   &kp PG_DN
//                                          &trans        &trans        &trans                                                                         &kp INS          &kp DEL          &trans
//             >;
//             sensor-bindings = <&scroll_encoder>;
//         };

//         raise_layer {
//             display-name = "SYMBOL";
//             bindings = <
// &trans  &kp EXCL      &kp AT        &kp HASH   &kp DLLR   &kp PRCNT                           &mmv MOVE_UP                     &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
// &trans  &bt BT_CLR    &mkp LCLK     &mkp MCLK  &mkp RCLK  &mkp MB4            &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
// &trans  &out OUT_USB  &out OUT_BLE  &none      &none      &mkp MB5  &trans                    &mmv MOVE_DOWN                   &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
//                                     &trans     &trans     &kp SPACE                                                            &kp RET    &trans     &trans
//             >;
//             sensor-bindings = <&scroll_encoder>;
//         };

//         layer_3 {
//             display-name = "Fn";
//             bindings = <
// &studio_unlock   &kp F1      &kp F2      &kp F3       &kp F4     &kp F5                                  &mmv MOVE_UP                     &kp F6       &kp F7     &kp F8       &kp F9      &kp F10          &kp F11
// &trans  &trans      &mkp LCLK   &mkp MCLK    &mkp RCLK  &mkp MB4                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &bootloader  &mkp LCLK  &mkp MCLK    &mkp RCLK   &kp PRINTSCREEN  &kp F12
// &trans  &sys_reset  &trans      &bootloader  &trans     &mkp MB5  &kp C_MUTE                    &mmv MOVE_DOWN                   &trans       &trans     &bootloader  &sys_reset  &kp SCROLLLOCK   &kp PAUSE_BREAK
//                                 &trans      &trans      &trans                                                                   &trans       &trans     &trans
//             >;
//             sensor-bindings = <&scroll_encoder>;
//         };
//     };
// };
